plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'com.google.devtools.ksp'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId "dev.jylha.station"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode 16
        versionName "1.2.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
        }
        benchmark {
            initWith buildTypes.release
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "${versions.compose}"
    }

    ksp {
        arg("room.schemaLocation", "$projectDir/schemas")
        arg("room.incremental", "true")
    }

    lint {
        baseline file('lint-baseline.xml')
    }
}

dependencies {
    implementation "androidx.activity:activity-compose:${versions.activity}"
    implementation "androidx.compose.foundation:foundation:${versions.compose}"
    implementation "androidx.compose.material:material:${versions.compose}"
    implementation "androidx.compose.material:material-icons-extended:${versions.compose}"
    implementation "androidx.compose.ui:ui-tooling:${versions.compose}"
    implementation "androidx.constraintlayout:constraintlayout-compose:${versions.constraintlayout}"
    implementation "androidx.core:core-splashscreen:${versions.splashscreen}"
    implementation "androidx.datastore:datastore-preferences-core:${versions.datastore}"
    implementation "androidx.datastore:datastore-preferences:${versions.datastore}"
    implementation "androidx.hilt:hilt-navigation:${versions.hilt_navigation}"
    implementation "androidx.hilt:hilt-navigation-compose:${versions.hilt_navigation_compose}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:${versions.lifecycle}"
    implementation "androidx.navigation:navigation-compose:${versions.navigation}"
    implementation "androidx.room:room-ktx:${versions.room}"
    implementation "androidx.room:room-runtime:${versions.room}"
    implementation "com.airbnb.android:lottie-compose:${versions.lottie}"
    implementation "com.dropbox.mobile.store:store4:${versions.store}"
    implementation "com.google.accompanist:accompanist-insets:${versions.accompanist}"
    implementation "com.google.accompanist:accompanist-navigation-animation:${versions.accompanist}"
    implementation "com.google.accompanist:accompanist-swiperefresh:${versions.accompanist}"
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    implementation "com.google.android.gms:play-services-oss-licenses:17.0.0"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:${versions.coroutines}"

    kapt "com.google.dagger:hilt-android-compiler:${versions.hilt}"
    kapt "androidx.hilt:hilt-compiler:${versions.hilt_navigation}"
    ksp "androidx.room:room-compiler:${versions.room}"

    testImplementation "androidx.room:room-testing:${versions.room}"
    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"

    androidTestImplementation "androidx.compose.ui:ui-test-junit4:${versions.compose}"
    androidTestImplementation "com.google.truth:truth:${versions.truth}"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockito_kotlin}"
    androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xskip-prerelease-check",
                "-opt-in=kotlin.RequiresOptIn"
        ]
    }
}
